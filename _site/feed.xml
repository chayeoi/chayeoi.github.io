<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-01-01T20:37:35+09:00</updated><id>http://localhost:4000/</id><title type="html">YEONIARY BLOG</title><subtitle>프론트엔드 기술 블로그 # Write an awesome description for your new site here. You can edit this # line in _config.yml. It will appear in your document head meta (for # Google search results) and in your feed.xml site description.
</subtitle><author><name>Chanyeon Kim</name></author><entry><title type="html">블로그 테스트 8</title><link href="http://localhost:4000/learn/js/charlie/" rel="alternate" type="text/html" title="블로그 테스트 8" /><published>2017-10-01T19:32:20+09:00</published><updated>2017-10-01T19:32:20+09:00</updated><id>http://localhost:4000/learn/js/charlie</id><content type="html" xml:base="http://localhost:4000/learn/js/charlie/">&lt;h1 id=&quot;으악&quot;&gt;으악&lt;/h1&gt;</content><author><name>Chanyeon Kim</name></author><category term="javascript" /><category term="Blog" /><category term="찬연" /><category term="Prototype" /><summary type="html">으악</summary></entry><entry><title type="html">블로그 테스트 7</title><link href="http://localhost:4000/learn/js/hello-world/" rel="alternate" type="text/html" title="블로그 테스트 7" /><published>2017-08-26T19:32:20+09:00</published><updated>2017-08-26T19:32:20+09:00</updated><id>http://localhost:4000/learn/js/hello-world</id><content type="html" xml:base="http://localhost:4000/learn/js/hello-world/">&lt;p&gt;Hello World!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post-1.jpg&quot; /&gt;&lt;/p&gt;</content><author><name>Chanyeon Kim</name></author><category term="javascript" /><category term="Blog" /><category term="찬연" /><category term="Prototype" /><summary type="html">Hello World!</summary></entry><entry><title type="html">블로그 테스트 6</title><link href="http://localhost:4000/learn/css3/i-conquer-the-himalayas/" rel="alternate" type="text/html" title="블로그 테스트 6" /><published>2017-08-25T19:32:20+09:00</published><updated>2017-08-25T19:32:20+09:00</updated><id>http://localhost:4000/learn/css3/i-conquer-the-himalayas</id><content type="html" xml:base="http://localhost:4000/learn/css3/i-conquer-the-himalayas/">&lt;h2 id=&quot;1-day&quot;&gt;1 Day&lt;/h2&gt;

&lt;h3 id=&quot;1-값-더-알아보기&quot;&gt;1. 값 더 알아보기&lt;/h3&gt;

&lt;h4 id=&quot;11-블록-스코프&quot;&gt;1.1 블록 스코프&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;특별한 기능이 없는 블록을 만들 수도 있다. 객체와 유사하게 중괄호로 코드의 일부분을 둘러싸면 된다.&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ReferenceError: i is not defined&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;12-함수-호출&quot;&gt;1.2 함수 호출&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;만약 함수 호출 시에 객체를 인자로 넘긴다면, 이 때 역시 &lt;strong&gt;실제로 복사되는 것은 객체 자체가 아니라 참조&lt;/strong&gt;이다. 그래서, 우리는 이 참조를 이용해 &lt;strong&gt;원본 객체의 내용을 변경할 수 있다.&lt;/strong&gt; 원본이나, 복사된 참조나 &lt;strong&gt;같은 객체를 가리키기 때문이다.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;아래 코드에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;obj&lt;/code&gt;가 실제 heap에 저장된 객체에 대한 참조를 담고 있을 때, &lt;code class=&quot;highlighter-rouge&quot;&gt;obj&lt;/code&gt;를 &lt;code class=&quot;highlighter-rouge&quot;&gt;addProp(o)&lt;/code&gt; 함수에 인자로 전달하면 &lt;code class=&quot;highlighter-rouge&quot;&gt;o&lt;/code&gt;에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;obj&lt;/code&gt;가 참조하고 있는 같은 객체에 대한 참조 주소가 복사된다.&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addProp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 변수 `obj`에 저장되어 있는 참조가 매개변수 `o`에 복사된다.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;addProp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;13-객체의-같음&quot;&gt;1.3 객체의 같음&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;프로그램을 작성하다가 객체에 대한 비교를 하는 코드를 짜고 있는 자신을 발견하게 되면, 지금 객체의 내용을 비교하려고 하는 것인지, 또는 객체의 참조를 비교하려고 하는 것인지를 꼭 생각해보자. 객체의 내용을 통해 비교하고 싶다면, 깊은 비교 기능을 지원하는 &lt;a href=&quot;https://www.npmjs.com/package/fast-deep-equal&quot;&gt;라이브러리&lt;/a&gt;를 이용하거나, 정확히 어떤 내용을 비교하고 싶은지를 가지고 &lt;strong&gt;함수 혹은 메소드&lt;/strong&gt;를 작성한 후 그것을 이용하면 된다.&lt;/p&gt;

    &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// npm install fast-deep-equal&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'fast-deep-equal'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'bar'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// true &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;14-불변성immutability&quot;&gt;1.4 불변성(Immutability)&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;가변인 값은 어디서 어떻게 변경될 지 알 수 없다. 변경되지 말아야 할 객체가 있다면, 정말로 변경되지 않도록 신경 써서 코드를 작성해야 한다. 그러나 객체가 정말로 변경되지 않았는지를 확인하는 일은 쉽지 않아서, 때때로 &lt;strong&gt;객체의 가변성 때문에 프로그래밍이 어려워지기도 한다.&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;객체의 가변성 때문에 어려움을 겪고 있다면, 두 가지 해결책을 시도해볼 수 있다.&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;먼저 &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.freeze&lt;/code&gt;의 사용을 고려해볼 수 있다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.freeze&lt;/code&gt;는 객체를 &lt;strong&gt;얼려서&lt;/strong&gt; 속성의 추가, 변경, 삭제를 막는다. 다만 &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.freeze&lt;/code&gt;를 호출한다고 해서 &lt;strong&gt;객체 안에 있는 객체&lt;/strong&gt;까지 얼려버리지는 않으므로, 중첩된 객체에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.freeze&lt;/code&gt;를 사용하기가 조금 까다롭다. 그리고, 다음에 소개할 방법과 비교하면 여러모로 편의성이 떨어진다.&lt;/p&gt;

        &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;freeze&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 모두 무시된다.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;newProp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;delete&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// { prop: 1 }&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;다음으로 &lt;a href=&quot;https://facebook.github.io/immutable-js/&quot;&gt;Immutable.js&lt;/a&gt; 같은 라이브러리의 사용을 고려해보자. 이런 라이브러리들은 &lt;code class=&quot;highlighter-rouge&quot;&gt;Object.freeze&lt;/code&gt;처럼 객체를 정말로 얼려버리지는 않지만, 객체를 &lt;strong&gt;마치 불변인 것처럼&lt;/strong&gt; 다룰 수 있는 방법을 제공한다. 다시 말하면, 이 객체들은 메소드를 통해 내용이 조금이라도 변경되면 아예 새로운 객체를 반환한다. 즉, &lt;strong&gt;내용이 달라지면 참조 역시 달라지게 되어&lt;/strong&gt; 객체의 내용이 변경되었는지를 확인하는 작업이 아주 쉬워진다. 아래는 Immutable.js에서 제공하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;List&lt;/code&gt;를 활용한 예제이다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;      &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'immutable'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// Immutable.js에서 제공하는 `List`는 배열과 유사하지만, 불변인 것처럼 다룰 수 있는 자료구조입니다.&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 새 List 인스턴스를 반환합니다.&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// 내용이 달라지면, 참조도 달라집니다.&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// false&lt;/span&gt;
      &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;15-래퍼-객체wrapper-object&quot;&gt;1.5 래퍼 객체(Wrapper Object)&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;String.prototype.valueOf()&lt;/code&gt; 메소드를 이용하여 String 객체 타입을 원시 타입의 값으로 되돌릴 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;인용 블록 입니다. this is blockquote.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/yosh-ginsu.jpg&quot; alt=&quot;Yosh Ginsu&quot; /&gt;&lt;/p&gt;</content><author><name>Adam Neilson</name></author><category term="css" /><category term="Blog" /><category term="This" /><summary type="html">1 Day</summary></entry><entry><title type="html">블로그 테스트 5</title><link href="http://localhost:4000/learn/css3/i-meet-the-sunset/" rel="alternate" type="text/html" title="블로그 테스트 5" /><published>2017-08-24T19:32:20+09:00</published><updated>2017-08-24T19:32:20+09:00</updated><id>http://localhost:4000/learn/css3/i-meet-the-sunset</id><content type="html" xml:base="http://localhost:4000/learn/css3/i-meet-the-sunset/">&lt;p&gt;후아 어렵다&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name>Chanyeon Kim</name></author><category term="css" /><category term="Blog" /><category term="Hello World" /><summary type="html">후아 어렵다</summary></entry><entry><title type="html">블로그 테스트 4</title><link href="http://localhost:4000/learn/etc/meeting-with-adventures/" rel="alternate" type="text/html" title="블로그 테스트 4" /><published>2017-08-23T19:32:20+09:00</published><updated>2017-08-23T19:32:20+09:00</updated><id>http://localhost:4000/learn/etc/meeting-with-adventures</id><content type="html" xml:base="http://localhost:4000/learn/etc/meeting-with-adventures/">&lt;p&gt;지킬&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name>Chanyeon Kim</name></author><category term="etc" /><category term="Blog" /><category term="This" /><summary type="html">지킬</summary></entry><entry><title type="html">블로그 테스트 3</title><link href="http://localhost:4000/learn/etc/snowboarding-and-my-life/" rel="alternate" type="text/html" title="블로그 테스트 3" /><published>2017-08-22T19:32:20+09:00</published><updated>2017-08-22T19:32:20+09:00</updated><id>http://localhost:4000/learn/etc/snowboarding-and-my-life</id><content type="html" xml:base="http://localhost:4000/learn/etc/snowboarding-and-my-life/">&lt;p&gt;언제완성하냐&lt;/p&gt;</content><author><name>Chanyeon Kim</name></author><category term="etc" /><category term="Blog" /><category term="찬연" /><summary type="html">언제완성하냐</summary></entry><entry><title type="html">블로그 테스트 2</title><link href="http://localhost:4000/learn/etc/time-to-think/" rel="alternate" type="text/html" title="블로그 테스트 2" /><published>2017-08-21T19:32:20+09:00</published><updated>2017-08-21T19:32:20+09:00</updated><id>http://localhost:4000/learn/etc/time-to-think</id><content type="html" xml:base="http://localhost:4000/learn/etc/time-to-think/">&lt;h1 id=&quot;게시판&quot;&gt;게시판&lt;/h1&gt;

&lt;h2 id=&quot;1-model&quot;&gt;1. Model&lt;/h2&gt;

&lt;h3 id=&quot;exampleboard-table&quot;&gt;exampleboard Table&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;글 번호 (number)&lt;/li&gt;
  &lt;li&gt;이름 (name)&lt;/li&gt;
  &lt;li&gt;비밀번호 (password)&lt;/li&gt;
  &lt;li&gt;제목 (title)&lt;/li&gt;
  &lt;li&gt;내용 (content)&lt;/li&gt;
  &lt;li&gt;작성일 (date)&lt;/li&gt;
  &lt;li&gt;조회수 (hits)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2-view&quot;&gt;2. View&lt;/h2&gt;

&lt;h3 id=&quot;create&quot;&gt;Create&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;new.ejs&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;read&quot;&gt;Read&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;index.ejs&lt;/li&gt;
  &lt;li&gt;show.ejs&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;update&quot;&gt;Update&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;edit.ejs&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;3-controller&quot;&gt;3. Controller&lt;/h2&gt;

&lt;h3 id=&quot;create-1&quot;&gt;Create&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;/new&lt;/li&gt;
  &lt;li&gt;/create&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;read-1&quot;&gt;Read&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;/&lt;/li&gt;
  &lt;li&gt;/show&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;update-1&quot;&gt;Update&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;/edit&lt;/li&gt;
  &lt;li&gt;/update&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;delete&quot;&gt;Delete&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;/delete&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Chanyeon Kim</name></author><category term="etc" /><category term="Blog" /><category term="Prototype" /><summary type="html">게시판</summary></entry><entry><title type="html">블로그 테스트 1</title><link href="http://localhost:4000/learn/html5/the-forest-in-the-fog/" rel="alternate" type="text/html" title="블로그 테스트 1" /><published>2017-08-20T19:32:20+09:00</published><updated>2017-08-20T19:32:20+09:00</updated><id>http://localhost:4000/learn/html5/the-forest-in-the-fog</id><content type="html" xml:base="http://localhost:4000/learn/html5/the-forest-in-the-fog/">&lt;h1 id=&quot;today-i-learned&quot;&gt;Today I Learned&lt;/h1&gt;

&lt;h2 id=&quot;01-html5&quot;&gt;01 HTML5&lt;/h2&gt;

&lt;h3 id=&quot;1-web은-internet의-수많은-서비스-중에-하나일-뿐이다&quot;&gt;1. Web은 Internet의 수많은 서비스 중에 하나일 뿐이다.&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;2-웹-접근성&quot;&gt;2. 웹 접근성&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;웹 접근성을 보장하는 방법
    &lt;ol&gt;
      &lt;li&gt;가이드라인 준수(WCAG 2.0)&lt;/li&gt;
      &lt;li&gt;웹 표준 준수&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;한 가지 수단이 아니라 다양한 수단으로 접근할 수 있도록 제공되어야 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;3-화면-구성-분할&quot;&gt;3. 화면 구성 분할&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;기본적으로 다음과 같은 단위와 순서로 분할한다.
    &lt;ol&gt;
      &lt;li&gt;헤더&lt;/li&gt;
      &lt;li&gt;(네비게이션)&lt;/li&gt;
      &lt;li&gt;콘텐츠&lt;/li&gt;
      &lt;li&gt;푸터&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;반복되지만 정보를 가진 영역이 아닐 때 그 의미에 맞게 네이밍하고 div 또는 article을 사용한다.&lt;/li&gt;
  &lt;li&gt;div 태그의 ‘role’ 속성을 이용해 의미를 부여해도 괜찮지만, 역할 모델을 쓰느니 시맨틱 태그를 사용하여 분할하는 것이 더 바람직하다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;div.container&lt;/code&gt;로 영역을 감싸는 것은 필수가 아니라 옵션이다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-html5-기초&quot;&gt;4. HTML5 기초&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;특수문자&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;lt;&lt;/code&gt;: less than, &amp;lt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;gt;&lt;/code&gt;: greater than, &amp;gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;amp;&lt;/code&gt;: ampersand, &amp;amp;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;copy;&lt;/code&gt;: copyright, ©&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.htmlhelp.com/reference/html40/entities/special.html&quot;&gt;Special Entities&lt;/a&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;head 설정&lt;/p&gt;

    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 다음 2개의 meta 태그는 같은 인코딩 속성을 설정한다. --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/html;charset=UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- HTML4.1 방식 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- HTML5 방식 --&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!--'lang'은 global attribute로 웹 접근성과 밀접한 관련이 있다.--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!--'id'라는 content가 있을 때 lang=&quot;ko&quot;면 &quot;이드&quot;라 읽고 lang=&quot;en&quot;일 때 &quot;아이디&quot;라 읽는다.--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!--meta charset=&quot;UTF-8을 꼭 head가 들어가자마자 첫 줄에 선언해줘야 그 다음 줄부터 위치하는 tag들도 인코딩이 깨지지 않는다.--&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!--UI에 대한 변경을 해주고 싶을 때 사용하는 meta 속성--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewport&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!--X는 비표준, UA는 User Agent를 의미한다.--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!--&quot;ie=edge&quot;: 설치되어 있는 브라우저 중에 최신 버전으로 설정--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!--&quot;ie=8&quot;: 11 버전을 쓰고 있더라도 8 버전으로 렌더링--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;http-equiv=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-UA-Compatible&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ie=edge&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;abbr&amp;gt;&lt;/code&gt;: 축약 태그&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;5-cross-browsing-issue&quot;&gt;5. Cross Browsing Issue&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;지원하지 않는 브라우저를 버릴 것이 아니라 대안을 만드는 것이 진정한 해결 방법이다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;6-keyboard-focusing&quot;&gt;6. Keyboard Focusing&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;키보드 포커싱은 기본적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;form&lt;/code&gt; 관련 요소만 받을 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다른 속성들이 포커스를 받게 하려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;tabindex&lt;/code&gt; 속성을 마크업에 추가한다.&lt;/p&gt;

    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;tabindex=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;HTML에 대해&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tabindex&lt;/code&gt;는 마크업 순서에 따라 접근한다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;tabindex&quot;&gt;tabindex&lt;/h4&gt;

  &lt;ol&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tabindex&lt;/code&gt;의 value가 0인 이유?&lt;/li&gt;
  &lt;/ol&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tabindex&lt;/code&gt;는 링크 관련 태그 및 &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; 태그 이외의 요소가 키보드 포커싱을 받을 수 있도록 설정하는 어트리뷰트&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tabindex: 0&lt;/code&gt;은 순차적으로 포커싱을 받을 수 있도록 하고,  &lt;code class=&quot;highlighter-rouge&quot;&gt;tabindex: 1&lt;/code&gt;은 인접한 요소 중에 &lt;code class=&quot;highlighter-rouge&quot;&gt;tabindex&lt;/code&gt; 속성을 가진 요소를 탐색한 후 해당 요소들에 대해 인덱싱한다.&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;tabindex: -1&lt;/code&gt;은 모든 요소들에 대하여 탭 포커스에서 제외시킬 수 있다.&lt;/li&gt;
  &lt;/ul&gt;

  &lt;ol&gt;
    &lt;li&gt;만약 인접한 형제 요소가 tabindex를 가지고 있다면 자식 요소보다 형제 요소에 먼저 접근하는지?&lt;/li&gt;
  &lt;/ol&gt;

  &lt;ul&gt;
    &lt;li&gt;자식 요소를 탐색 후 형제 요소에 접근한다.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;7-섹셔닝-httpsseulbigithubio&quot;&gt;7. 섹셔닝 (&lt;a href=&quot;https://seulbi.github.io/&quot;&gt;https://seulbi.github.io/&lt;/a&gt;)&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;구조 잡는 순서
    &lt;ol&gt;
      &lt;li&gt;Step 1: 영역을 구분한다.&lt;/li&gt;
      &lt;li&gt;Step 2: 어떤 태그를 사용할지 정한다.&lt;/li&gt;
      &lt;li&gt;Step 3: 각 요소를 클래스와 아이디로 네이밍한다.&lt;/li&gt;
      &lt;li&gt;Step 4: 특정 이벤트가 발생했을 때 어떤 방식으로 처리할 건지 조사한다. 그 이후에 더 합리적인 방법을 고민하면서 튜닝하고 문제를 줄여나간다.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;섹셔닝
    &lt;ol&gt;
      &lt;li&gt;header: 로고(h1), 멤버(ul), 검색 홈(form)&lt;/li&gt;
      &lt;li&gt;nav: 메인 메뉴(ul)&lt;/li&gt;
      &lt;li&gt;main: 서적(section), 뉴스(article), 게시판(section), 인기 사이트(section), 트위터(article)
        &lt;ol&gt;
          &lt;li&gt;트위터나 뉴스 콘텐츠처럼 배포 목적이 있을 때 article로 보는 것도 좋다.&lt;/li&gt;
          &lt;li&gt;div로 구분할 시에 &lt;code class=&quot;highlighter-rouge&quot;&gt;헤딩 처리&lt;/code&gt;를 통해 암묵적인 아웃라인을 형성햐여야 한다.&lt;/li&gt;
          &lt;li&gt;section과 article도 역시 헤딩을 가져야 한다.&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;footer: 주소(address), 저작권(div)&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;rss 피드로 배포할 목적이 있다면 article로 마크업한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;article은 아웃라인에 영향을 주는 요소이므로 heading을 가져야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;article이 독립적으로 배포할 목적을 지녔다면 h1으로 처리하기도 하지만, 요즘 스펙에서는 그렇다 하더라도 적절한 수준의 heading을 사용할 것을 권장하고 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;연관된 콘텐츠는 section, 독립된 콘텐츠는 주로 article로 마크업한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;삭제가 되더라도 본문 콘텐츠에 영향을 주지 않는 영역은 aside로 마크업한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;사이드바이기 때문에 무조건 aside로 처리하는 것이 아니라, 그 성격을 고민해봐야 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;8-button&quot;&gt;8. button&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Type
    &lt;ol&gt;
      &lt;li&gt;submit: 폼 양식 제출&lt;/li&gt;
      &lt;li&gt;reset: 입력 내용 리셋&lt;/li&gt;
      &lt;li&gt;button: 스크립트 실행&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;9-form&quot;&gt;9. form&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;form&lt;/code&gt; 안의 내용은 유기적으로 정보 교환이 이루어져야 하는 부분으로 판단된다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fieldset&lt;/code&gt;은 연관된 내용들을 하나로 묶는 역할을 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fieldset&lt;/code&gt; 안에 &lt;code class=&quot;highlighter-rouge&quot;&gt;fieldset&lt;/code&gt;이 여러 번 위치할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;legend&lt;/code&gt;는 &lt;code class=&quot;highlighter-rouge&quot;&gt;fieldset&lt;/code&gt;의 내용을 명시하는 역할을 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt;에 일대일로 대응하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;label&lt;/code&gt;은 항상 있어야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;label&lt;/code&gt;의 for 어트리뷰트로 &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt;의 id를 읽어옴으로써 두 요소를 묶을 수 있다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;   &lt;span class=&quot;nt&quot;&gt;&amp;lt;form&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;fieldset&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;legend&amp;gt;&lt;/span&gt;로그인 폼&lt;span class=&quot;nt&quot;&gt;&amp;lt;/legend&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;label&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;for=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user-id&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/label&amp;gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user-id&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;submit&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;제출&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/fieldset&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/form&amp;gt;&lt;/span&gt;
   &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;하나의 &lt;code class=&quot;highlighter-rouge&quot;&gt;form&lt;/code&gt; 안에 2개의 &lt;code class=&quot;highlighter-rouge&quot;&gt;fieldset&lt;/code&gt;을 만들어 필수 입력 정보와 선택 입력 정보로 구분할 수 있다. &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt;와 성격이 유사하지만 &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt;는 범용적인 그루핑 요소인 반면, &lt;code class=&quot;highlighter-rouge&quot;&gt;fieldset&lt;/code&gt;은 연관성 있는 요소들을 묶는 전용 그루핑 요소이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;label&lt;/code&gt;이 필요 없을 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; 어트리뷰트로 역할을 알려주는 것을 우리 나라에서 허용하지만 권장하지 않는다. 모든 &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt;은 일대일로 대응하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;label&lt;/code&gt;을 가져야 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;카드 번호를 입력받을 때 네 자리씩 끊어서 입력받는 것보다 한 번에 입력받는 것이 &lt;code class=&quot;highlighter-rouge&quot;&gt;label&lt;/code&gt;을 하나만 사용할 수 있으므로 더 권장되는 방법이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;required&lt;/code&gt; 어트리뷰트는 이 입력 상자는 필수라는 뜻이다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.miketaylr.com/pres/html5/forms2.html&quot;&gt;Web Forms 2.0&lt;/a&gt;&lt;/p&gt;

    &lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 최대 글자 수를 6글자로 제한. 최소 글자 수는 정규표현식으로 제한할 수 있다. --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;maxlength=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;6&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- datalist를 input의 리스트로 연결. autofocus를 설정하면 로딩되었을 때 자동 초점이 맞춰진다. --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;search&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;autofocus&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;list=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;search-suggestions&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; 
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;datalist&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;search-suggestions&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;option&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;label=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;DM&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Depeche Mode&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      	&lt;span class=&quot;nt&quot;&gt;&amp;lt;option&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;label=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Moz&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Morrissey&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      	&lt;span class=&quot;nt&quot;&gt;&amp;lt;option&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;label=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;NO&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;New Order&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      	&lt;span class=&quot;nt&quot;&gt;&amp;lt;option&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;label=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;TC&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The Cure&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/datalist&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- tel 타입을 설정하면 모바일에서 키보드 포커싱을 받았을 때 숫자 키보드가 올라오도록 할 수 있다. pattern 어트리뷰트에 정규표현식을 설정. name은 값을 담는 변수와 비슷하다. --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tel&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;pattern=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[0-9]{10}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tel&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Phone Number?!?!&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 소셜 계정을 입력받고자 하면 url 타입을 사용한다. --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;url&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;url&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;earl&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;캘린더 type은 키보드 접근이 가능하다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;10-명시적-암묵적-아웃라인&quot;&gt;10. 명시적, 암묵적 아웃라인&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;다음 4가지는 명시적으로 아웃라인을 형성하며 헤딩을 가져야 한다.
    &lt;ol&gt;
      &lt;li&gt;section&lt;/li&gt;
      &lt;li&gt;article&lt;/li&gt;
      &lt;li&gt;nav&lt;/li&gt;
      &lt;li&gt;aside&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;div 같은 경우 헤딩을 선언한 후, 또 다른 div가 존재하더라도 다른 헤딩을 만날 때까지 암묵적인 아웃라인이 형성된다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://appletree.or.kr/blog/web-development/html/html5%EC%9D%98-%EC%83%88%EB%A1%9C%EC%9A%B4-%EB%AC%B8%EC%84%9C-outline-%EC%95%8C%EA%B3%A0%EB%A6%AC%EB%93%AC/&quot;&gt;Outline 알고리즘&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/HTML/HTML5_%EB%AC%B8%EC%84%9C%EC%9D%98_%EC%84%B9%EC%85%98%EA%B3%BC_%EC%9C%A4%EA%B3%BD&quot;&gt;MDN 문서&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.slideshare.net/NULINTS/2014-html5&quot;&gt;슬라이드 쉐어 - 아웃라인 알고리즘&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;11-img&quot;&gt;11. img&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;웹 접근성을 고려해 &lt;code class=&quot;highlighter-rouge&quot;&gt;alt&lt;/code&gt; 어트리뷰트를 부여해야 한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;alt&lt;/code&gt; 어트리뷰트에 빈 값을 넣으면 스크린 리더는 해당 이미지를 읽지 않는다. 그렇다고 해서  &lt;code class=&quot;highlighter-rouge&quot;&gt;alt&lt;/code&gt; 속성을 아예 할당하지 않으면 스크린 리더는 &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; 어트리뷰트를 읽어주게 된다. 보통 장식용으로 사용할 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;alt&lt;/code&gt; 속성에 빈 값을 넣어준다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt; 어트리뷰트는 &lt;code class=&quot;highlighter-rouge&quot;&gt;alt&lt;/code&gt;만으로 설명이 부족할 때 보충 설명을 하는 역할이다. 모든 태그에 사용할 수 있다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;alt&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;title&lt;/code&gt;의 용도는 다르기 때문에 같은 값을 설정해서 중복을 발생시키는 것은 좋은 방식이 아니다.&lt;/li&gt;
  &lt;li&gt;웹 사이트의 성격을 고민해봤을 때, 이미지라 하더라도 그 뜻과 닿아있다면 heading으로 처리해도 적절하다. 적절한 텍스트를 넣은 후에 IR 기법으로 글자를 덮어씌워 처리하면 된다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;12-a&quot;&gt;12. a&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;onclick=&quot;window.open()&quot;&lt;/code&gt;을 이용하면 새 창을 열어주지만 새 창을 읽어주지 않아서 키보드 포커스가 새로운 창을 인지할 수 없다. 이 때 접근성을 제어하고 싶다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;title=&quot;새창&quot;&lt;/code&gt;으로 알려주면 된다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;target=&quot;_blank&quot;&lt;/code&gt;로 새 창을 띄울 수 있다.&lt;/li&gt;
  &lt;li&gt;HTML5에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;는 transparent(투명) 모델로 바뀌었다. 따라서 block 요소를 a 요소로 묶을 수 있고 그 전체 영역에 링크가 적용된다.&lt;/li&gt;
  &lt;li&gt;ul 요소는 반드시 1개 이상의 자식 li 요소를 포함해야 하기 때문에 li 요소를 a로 마크업한다면 잘못된 접근이다.&lt;/li&gt;
  &lt;li&gt;button 요소를 a로 마크업하는 것 역시 잘못된 접근이다. 링크 안에 링크를 포함할 수 없다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;13-문서-구조화&quot;&gt;13. 문서 구조화&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;마크업을 할 때, 항상 문서 및 콘텐츠의 논리적 순서를 고려해야 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;14-정의형-목록-dl&quot;&gt;14. 정의형 목록 dl&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;정의형 목록을 만들 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;dl&lt;/code&gt; 태그를 사용한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dt&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;dd&lt;/code&gt;는 1:1, 1:n, n:1 대응 모두 가능하다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;15-시맨틱-태그&quot;&gt;15. 시맨틱 태그&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;span&lt;/code&gt;이나 &lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt;는 단순히 중립적인 그루핑 요소로 &lt;strong&gt;non-semantic&lt;/strong&gt;하다. 보통 스타일링을 위한 용도로 사용한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;16-wai-aria&quot;&gt;16. WAI-ARIA&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;웹 어플리케이션에 접근성을 개선하거나 보장할 수 있는 스펙&lt;/li&gt;
  &lt;li&gt;기존 스펙과 중복되는 상황에서는 ARIA 대신 기존 스펙을 따르는 것이 좋다.&lt;/li&gt;
  &lt;li&gt;이미 heading으로 명시한 상황에서 title로 중복된 내용을 명시해야 하는 상황이라면 &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-labelledby&lt;/code&gt;를 사용하는 것이 좋다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;aria-labelledby&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;aria-describedby&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;aria-labelledby&lt;/code&gt;: 명시적으로 딱 떨어지는 단어&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;aria-describedby&lt;/code&gt;: 문장 단위를 명시할 때&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;aria-hidden&lt;/code&gt;: 읽지 않아도 되는 정보 처리&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/niawa&quot;&gt;정보화 지능원 github 계정&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;www.wah.or.kr&quot;&gt;웹 접근성 연구소&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;17-figure&quot;&gt;17. figure&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;caption을 포함할 수 있는 요소는 모두 figure로 마크업할 수 있다.&lt;/li&gt;
  &lt;li&gt;figure는 자식 요소로 figcaption을 가질 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;18-time&quot;&gt;18. time&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;시간에 관련된 정보를 마크업할 때 사용한다.&lt;/li&gt;
  &lt;li&gt;반드시 &lt;code class=&quot;highlighter-rouge&quot;&gt;datetime&lt;/code&gt; 속성을 가져야 한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;19-strong과-em&quot;&gt;19. strong과 em&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;단순히 꾸밈을 위한 용도라면 &lt;code class=&quot;highlighter-rouge&quot;&gt;span&lt;/code&gt;으로 마크업하면 되겠지만, 의미를 갖는 영역이라면 시맨틱한 &lt;code class=&quot;highlighter-rouge&quot;&gt;em&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;strong&lt;/code&gt;으로 마크업한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;strong&lt;/code&gt;은 좀 더 강한 강조, &lt;code class=&quot;highlighter-rouge&quot;&gt;em&lt;/code&gt;은 비교적 약한 강조를 할 때 사용한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;20-ol&quot;&gt;20. ol&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ol&lt;/code&gt;은 순서 있는 리스트를 마크업할 때 사용한다.&lt;/li&gt;
  &lt;li&gt;리스트의 순서를 &lt;code class=&quot;highlighter-rouge&quot;&gt;list-style: none&lt;/code&gt;으로 지정하고 배경 이미지로 처리한다면 스크린 리더가 단순한 배경 이미지를 인식하지 못하므로 문제가 될 수 있다. &lt;code class=&quot;highlighter-rouge&quot;&gt;overflow: hidden&lt;/code&gt;으로 화면에서 숨김 처리한 후 가상 요소를 적절히 사용한다면 이 문제를 해결할 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;21-blockquote와-q&quot;&gt;21. blockquote와 q&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;blockquote&lt;/code&gt;와 &lt;code class=&quot;highlighter-rouge&quot;&gt;q&lt;/code&gt;는 모두 인용구를 처리할 때 사용하는 태그이다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;cite&lt;/code&gt; 어트리뷰트로 출처 정보를 밝힐 수 있다.&lt;/li&gt;
  &lt;li&gt;저작권에 대한 경각심을 가질 필요가 있다. 책에서 인용한 정보라면 &lt;em&gt;ISBN Number&lt;/em&gt;를 남기면 된다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;211-blockquote&quot;&gt;21.1 blockquote&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;blockquote&lt;/code&gt;는 block 형태의 인용 관련 태그이다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h4 id=&quot;212-q&quot;&gt;21.2 q&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;q&lt;/code&gt;는 inline 형태의 인용 관련 태그이다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;22-문서-내에-header나-footer는-반드시-1개&quot;&gt;22. 문서 내에 header나 footer는 반드시 1개?&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;본문의 footer 이외에 article 영역 또한 따로 footer를 가질 수도 있다.&lt;/li&gt;
  &lt;li&gt;header나 footer 모두 section이나 article 또는 body 안에 각각 존재할 수도 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;23-footer&quot;&gt;23. footer&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;footer 영역은 일반적인 컨텐츠가 아닌 사이트 연락처와 저작권을 나타내는 영역이므로 굳이 제목을 따로 부여하지 않아도 된다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;24-address&quot;&gt;24. address&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;주소에 관한 정보를 마크업할 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;address&lt;/code&gt; 태그를 사용한다.&lt;/li&gt;
  &lt;li&gt;본문에서 주소에 관한 정보를 나타낼 때는 &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt; 태그를 사용한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;address&lt;/code&gt;는 footer에서만 사용하는 태그이다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;25-br&quot;&gt;25. br&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;line break의 약자이다.&lt;/li&gt;
  &lt;li&gt;줄바꿈 처리할 때 &lt;code class=&quot;highlighter-rouge&quot;&gt;br&lt;/code&gt;을 사용하는 것보다 줄바꿈할 영역을 &lt;code class=&quot;highlighter-rouge&quot;&gt;span&lt;/code&gt;으로 묶어서 처리한다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;26-picture&quot;&gt;26. picture&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;기기 특성에 따라 다른 이미지를 지정(아트 디렉션)하려는 경우 &lt;code class=&quot;highlighter-rouge&quot;&gt;picture&lt;/code&gt; 요소를 사용한다.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;srcset&lt;/code&gt; 및 &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; 설명자를 &lt;code class=&quot;highlighter-rouge&quot;&gt;img&lt;/code&gt; 요소에 사용하면, 다른 밀도를 선택할 때 사용할 최적의 이미지에 대한 힌트를 브라우저에 제공할 수 있다.&lt;/li&gt;
  &lt;li&gt;마지막에 img 태그를 삽입하는 것은 source 요소를 해석할 수 없을 시에 대비한 폴백(fallback)이다. source를 보여줄 수 있으면 img는 무시된다.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/scottjehl/picturefill/blob/master/src/picturefill.js&quot;&gt;picturefill&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;27-이미지는-block으로-감싸는-것이-좋다&quot;&gt;27. 이미지는 Block으로 감싸는 것이 좋다.&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;사용자가 올린 이미지가 가로로 길지, 세로로 길지 미리 알 수 없으므로 부모 요소의 높이와 너비를 정사각형으로 맞춘 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;overflow: hidden&lt;/code&gt;으로 처리하여 해당 크기에 맞게 들어올 수 있도록 할 수 있다.&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name>Chanyeon Kim</name></author><category term="html5" /><category term="Blog" /><category term="Charlie" /><summary type="html">Today I Learned</summary></entry></feed>